import path from 'node:path';
import { pathExists, mkdirp, writeFile } from 'fs-extra';
import {
  MANIFEST_DIRECTORIES,
  MANIFEST_ROOT,
  MANIFEST_SAMPLE_FILES,
  ScaffoldOptions,
} from '@cac/core';
import { logger } from '@cac/logger';

const SAMPLE_FILE_HEADER = '# Generated by cac init\n';

export const scaffoldManifests = async ({ targetDir, force = false }: ScaffoldOptions): Promise<string> => {
  const manifestRoot = path.join(targetDir, MANIFEST_ROOT);
  const manifestExists = await pathExists(manifestRoot);

  if (manifestExists && !force) {
    throw new Error(`Manifest directory already exists at ${manifestRoot}`);
  }

  await mkdirp(manifestRoot);

  await Promise.all(
    MANIFEST_DIRECTORIES.map(async (directory) => {
      const directoryPath = path.join(manifestRoot, directory);
      await mkdirp(directoryPath);

      const sampleFilePath = path.join(directoryPath, MANIFEST_SAMPLE_FILES[directory]);
      const shouldWriteSample = force || !(await pathExists(sampleFilePath));

      if (shouldWriteSample) {
        const placeholder = `${SAMPLE_FILE_HEADER}# TODO: define ${directory} here\n`;
        await writeFile(sampleFilePath, placeholder, { encoding: 'utf-8' });
        logger.debug(`Created sample file at ${sampleFilePath}`);
      }
    }),
  );

  logger.info(`Manifests scaffolded in ${manifestRoot}`);
  return manifestRoot;
};
